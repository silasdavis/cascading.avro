/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package cascading.avro.generated;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Test2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Test2\",\"namespace\":\"cascading.avro.generated\",\"fields\":[{\"name\":\"innerRec\",\"type\":{\"type\":\"record\",\"name\":\"nested\",\"fields\":[{\"name\":\"anInnerField1\",\"type\":\"int\"},{\"name\":\"anInnerField2\",\"type\":\"string\"}]}},{\"name\":\"outerField\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public cascading.avro.generated.nested innerRec;
  @Deprecated public java.lang.CharSequence outerField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Test2() {}

  /**
   * All-args constructor.
   */
  public Test2(cascading.avro.generated.nested innerRec, java.lang.CharSequence outerField) {
    this.innerRec = innerRec;
    this.outerField = outerField;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return innerRec;
    case 1: return outerField;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: innerRec = (cascading.avro.generated.nested)value$; break;
    case 1: outerField = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'innerRec' field.
   */
  public cascading.avro.generated.nested getInnerRec() {
    return innerRec;
  }

  /**
   * Sets the value of the 'innerRec' field.
   * @param value the value to set.
   */
  public void setInnerRec(cascading.avro.generated.nested value) {
    this.innerRec = value;
  }

  /**
   * Gets the value of the 'outerField' field.
   */
  public java.lang.CharSequence getOuterField() {
    return outerField;
  }

  /**
   * Sets the value of the 'outerField' field.
   * @param value the value to set.
   */
  public void setOuterField(java.lang.CharSequence value) {
    this.outerField = value;
  }

  /** Creates a new Test2 RecordBuilder */
  public static cascading.avro.generated.Test2.Builder newBuilder() {
    return new cascading.avro.generated.Test2.Builder();
  }
  
  /** Creates a new Test2 RecordBuilder by copying an existing Builder */
  public static cascading.avro.generated.Test2.Builder newBuilder(cascading.avro.generated.Test2.Builder other) {
    return new cascading.avro.generated.Test2.Builder(other);
  }
  
  /** Creates a new Test2 RecordBuilder by copying an existing Test2 instance */
  public static cascading.avro.generated.Test2.Builder newBuilder(cascading.avro.generated.Test2 other) {
    return new cascading.avro.generated.Test2.Builder(other);
  }
  
  /**
   * RecordBuilder for Test2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Test2>
    implements org.apache.avro.data.RecordBuilder<Test2> {

    private cascading.avro.generated.nested innerRec;
    private java.lang.CharSequence outerField;

    /** Creates a new Builder */
    private Builder() {
      super(cascading.avro.generated.Test2.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(cascading.avro.generated.Test2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.innerRec)) {
        this.innerRec = data().deepCopy(fields()[0].schema(), other.innerRec);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.outerField)) {
        this.outerField = data().deepCopy(fields()[1].schema(), other.outerField);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Test2 instance */
    private Builder(cascading.avro.generated.Test2 other) {
            super(cascading.avro.generated.Test2.SCHEMA$);
      if (isValidValue(fields()[0], other.innerRec)) {
        this.innerRec = data().deepCopy(fields()[0].schema(), other.innerRec);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.outerField)) {
        this.outerField = data().deepCopy(fields()[1].schema(), other.outerField);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'innerRec' field */
    public cascading.avro.generated.nested getInnerRec() {
      return innerRec;
    }
    
    /** Sets the value of the 'innerRec' field */
    public cascading.avro.generated.Test2.Builder setInnerRec(cascading.avro.generated.nested value) {
      validate(fields()[0], value);
      this.innerRec = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'innerRec' field has been set */
    public boolean hasInnerRec() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'innerRec' field */
    public cascading.avro.generated.Test2.Builder clearInnerRec() {
      innerRec = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'outerField' field */
    public java.lang.CharSequence getOuterField() {
      return outerField;
    }
    
    /** Sets the value of the 'outerField' field */
    public cascading.avro.generated.Test2.Builder setOuterField(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.outerField = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'outerField' field has been set */
    public boolean hasOuterField() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'outerField' field */
    public cascading.avro.generated.Test2.Builder clearOuterField() {
      outerField = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Test2 build() {
      try {
        Test2 record = new Test2();
        record.innerRec = fieldSetFlags()[0] ? this.innerRec : (cascading.avro.generated.nested) defaultValue(fields()[0]);
        record.outerField = fieldSetFlags()[1] ? this.outerField : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}

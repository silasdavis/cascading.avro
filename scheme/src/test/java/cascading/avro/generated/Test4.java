/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package cascading.avro.generated;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Test4 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Test4\",\"namespace\":\"cascading.avro.generated\",\"fields\":[{\"name\":\"aListOfListOfInt\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"int\"}}},{\"name\":\"aListOfMapToLong\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"map\",\"values\":\"long\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.util.List<java.lang.Integer>> aListOfListOfInt;
  @Deprecated public java.util.List<java.util.Map<java.lang.CharSequence,java.lang.Long>> aListOfMapToLong;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Test4() {}

  /**
   * All-args constructor.
   */
  public Test4(java.util.List<java.util.List<java.lang.Integer>> aListOfListOfInt, java.util.List<java.util.Map<java.lang.CharSequence,java.lang.Long>> aListOfMapToLong) {
    this.aListOfListOfInt = aListOfListOfInt;
    this.aListOfMapToLong = aListOfMapToLong;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return aListOfListOfInt;
    case 1: return aListOfMapToLong;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: aListOfListOfInt = (java.util.List<java.util.List<java.lang.Integer>>)value$; break;
    case 1: aListOfMapToLong = (java.util.List<java.util.Map<java.lang.CharSequence,java.lang.Long>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'aListOfListOfInt' field.
   */
  public java.util.List<java.util.List<java.lang.Integer>> getAListOfListOfInt() {
    return aListOfListOfInt;
  }

  /**
   * Sets the value of the 'aListOfListOfInt' field.
   * @param value the value to set.
   */
  public void setAListOfListOfInt(java.util.List<java.util.List<java.lang.Integer>> value) {
    this.aListOfListOfInt = value;
  }

  /**
   * Gets the value of the 'aListOfMapToLong' field.
   */
  public java.util.List<java.util.Map<java.lang.CharSequence,java.lang.Long>> getAListOfMapToLong() {
    return aListOfMapToLong;
  }

  /**
   * Sets the value of the 'aListOfMapToLong' field.
   * @param value the value to set.
   */
  public void setAListOfMapToLong(java.util.List<java.util.Map<java.lang.CharSequence,java.lang.Long>> value) {
    this.aListOfMapToLong = value;
  }

  /** Creates a new Test4 RecordBuilder */
  public static cascading.avro.generated.Test4.Builder newBuilder() {
    return new cascading.avro.generated.Test4.Builder();
  }
  
  /** Creates a new Test4 RecordBuilder by copying an existing Builder */
  public static cascading.avro.generated.Test4.Builder newBuilder(cascading.avro.generated.Test4.Builder other) {
    return new cascading.avro.generated.Test4.Builder(other);
  }
  
  /** Creates a new Test4 RecordBuilder by copying an existing Test4 instance */
  public static cascading.avro.generated.Test4.Builder newBuilder(cascading.avro.generated.Test4 other) {
    return new cascading.avro.generated.Test4.Builder(other);
  }
  
  /**
   * RecordBuilder for Test4 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Test4>
    implements org.apache.avro.data.RecordBuilder<Test4> {

    private java.util.List<java.util.List<java.lang.Integer>> aListOfListOfInt;
    private java.util.List<java.util.Map<java.lang.CharSequence,java.lang.Long>> aListOfMapToLong;

    /** Creates a new Builder */
    private Builder() {
      super(cascading.avro.generated.Test4.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(cascading.avro.generated.Test4.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.aListOfListOfInt)) {
        this.aListOfListOfInt = data().deepCopy(fields()[0].schema(), other.aListOfListOfInt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aListOfMapToLong)) {
        this.aListOfMapToLong = data().deepCopy(fields()[1].schema(), other.aListOfMapToLong);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Test4 instance */
    private Builder(cascading.avro.generated.Test4 other) {
            super(cascading.avro.generated.Test4.SCHEMA$);
      if (isValidValue(fields()[0], other.aListOfListOfInt)) {
        this.aListOfListOfInt = data().deepCopy(fields()[0].schema(), other.aListOfListOfInt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aListOfMapToLong)) {
        this.aListOfMapToLong = data().deepCopy(fields()[1].schema(), other.aListOfMapToLong);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'aListOfListOfInt' field */
    public java.util.List<java.util.List<java.lang.Integer>> getAListOfListOfInt() {
      return aListOfListOfInt;
    }
    
    /** Sets the value of the 'aListOfListOfInt' field */
    public cascading.avro.generated.Test4.Builder setAListOfListOfInt(java.util.List<java.util.List<java.lang.Integer>> value) {
      validate(fields()[0], value);
      this.aListOfListOfInt = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'aListOfListOfInt' field has been set */
    public boolean hasAListOfListOfInt() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'aListOfListOfInt' field */
    public cascading.avro.generated.Test4.Builder clearAListOfListOfInt() {
      aListOfListOfInt = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'aListOfMapToLong' field */
    public java.util.List<java.util.Map<java.lang.CharSequence,java.lang.Long>> getAListOfMapToLong() {
      return aListOfMapToLong;
    }
    
    /** Sets the value of the 'aListOfMapToLong' field */
    public cascading.avro.generated.Test4.Builder setAListOfMapToLong(java.util.List<java.util.Map<java.lang.CharSequence,java.lang.Long>> value) {
      validate(fields()[1], value);
      this.aListOfMapToLong = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'aListOfMapToLong' field has been set */
    public boolean hasAListOfMapToLong() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'aListOfMapToLong' field */
    public cascading.avro.generated.Test4.Builder clearAListOfMapToLong() {
      aListOfMapToLong = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Test4 build() {
      try {
        Test4 record = new Test4();
        record.aListOfListOfInt = fieldSetFlags()[0] ? this.aListOfListOfInt : (java.util.List<java.util.List<java.lang.Integer>>) defaultValue(fields()[0]);
        record.aListOfMapToLong = fieldSetFlags()[1] ? this.aListOfMapToLong : (java.util.List<java.util.Map<java.lang.CharSequence,java.lang.Long>>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
